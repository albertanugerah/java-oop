Java Object Oriented Programming
--------------------------------
Pengenalan OOP
    Apa tu Object Oriented Programming?
       - Object Oriented Programming adalah sudut pandang bahasa pemrograman yang berkonsep “objek”
       - Ada banyak sudut pandang bahasa pemrograman, namun OOP adalah yang sangat populer saat ini.
       - Ada beberapa istilah yang perlu dimengerti dalam OOP, yaitu: Object dan Class

    Apa itu Object ?
        - Object adalah data yang berisi field / properties / attributes dan method / function / behavior
        - Semua data bukan primitif di Java adalah object, dari mulai Integer, Boolean, Character, String dan yang lainnya

    Apa itu Class ?
        - Class adalah blueprint, prototype atau cetakan untuk membuat Object
        - Class berisikan deklarasi semua properties dan functions yang dimiliki oleh Object
        - Setiap Object selalu dibuat dari Class
        - Dan sebuah Class bisa membuat Object tanpa batas

Class
    Membuat Class
        - Untuk membuat class, kita bisa menggunakan kata kunci class
        - Penamaan class biasa menggunakan format CamelCase

Object
    Membuat Object
        - Object adalah hasil instansiasi dari sebuah class
        - Untuk membuat object kita bisa menggunakan kata kunci new, dan diikuti dengan nama Class dan kurung ()

Field
    - Fields/Properties/Attributes adalah data yang bisa disisipkan didalam Object
    - Namun sebelum kita bisa memasukkan data di fields, kita harus mendeklarasikan data apa aja yang dimiliki object tersebut di dalam deklarasi class-nya
    - Membuat field sama seperti membuat variable, namun ditempatkan di block class

    Manipulasi Field
        - Fields yang ada di object, bisa kita manipulasi. Tergantung final atau bukan.
        - Jika final, berarti kita tidak bisa mengubah data field nya, namun jika tidak, kita bisa mengubah field nya
        - Untuk memanipulasi data field, sama seperti cara pada variable
        - Untuk mengakses field, kita butuh kata kunci . (titik) setelah nama object dan diikuti nama fields nya

Method
    - Selain menambahkan field, kita juga bisa menambahkan method ke object
    - Cara dengan mendeklarasikan method tersebut di dalam block class
    - Sama seperti method biasanya, kita juga bisa menambahkan return value, parameter dan method overloading di method yang ada di dalam block class
    - Untuk mengakses method tersebut, kita bisa menggunakan tanda titik (.) dan diikuti dengan nama method nya. Sama seperti mengakses field

Constructor
    - Didalam class Java kita bisa membuat constructor, constuctor adalah method yang akan dipanggil saat pertama kali Object dibuat
    - Mirip seperti method, kita bisa memberi perameter pada constructor
    - Nama constrctor = nama class, dan tidak membutuhkan kata kunci void atau reuturn value

    Note =  - ketika membuat constructor dan didalamnya ada parameter, maka Object yang kita buat akan error, karena kita menambahkan parameter didalam constructor,
            - untuk memperbaikinya kita WAJIB menambahkan parameter didalam Objectnya.
Constructor Overloading
    - Sama seperti di method, di constructor pun kita bisa melakukan overloading
    - Kita bisa membuat constructor lebih dari satu, dengan syarat tipe data parameter harus berbeda, atau jumlah parameter harus berbeda
Memanggil Constructor Lain
    - Constructor bisa memanggil constructor lain
    - Hal ini memudahkan saat kita butuh menginisialisasi data dengan berbagai kemungkinan
    - Cara untuk memanggil constructor lain, kita hanya perlu memanggilnya seperti memanggil method, namun dengan kata kunci this


Variable Shadowing
    - Variable shadowing adalah kejadian ketika kita membuat nama variable dengan nama yang sama di scope yang menutupi variable dengan nama yang sama di scope diatasnya
    - Ini biasa terjadi seperti kita membuat nama parameter di method sama dengan nama field di class
    - Saat terjadi variable shadowing, maka secara otomatis variable di scope diatasnya tidak bisa diakses

This Keyword
    - Saat kita membuat kode di dalam block constructor atau method di dalam class, kita bisa menggunakan kata kunci this untuk mengakses object saat ini
    - Misal kadang kita butuh mengakses sebuah field yang namanya sama dengan parameter method, hal ini tidak bisa dilakukan jika langsung menyebut nama field, kita bisa mengakses nama field tersebut dengan kata kunci this
    - This juga tidak hanya digunakan untuk mengakses field milik object saat ini, namun juga bisa digunakan untuk mengakses method
    - This bisa digunakan untuk mengatasi masalah variable shadowing

Inheritance
    - Inheritance atau pewarisan adalah kemampuan untuk menurunkan sebuah class ke class lain
    - Dalam artian, kita bisa membuat class Parent dan class Child
    - Class Child, hanya bisa punya satu class Parent, namun satu class Parent bisa punya banyak class Child
    - Saat sebuah class diturunkan, maka semua field dan method yang ada di class Parent, secara otomatis akan dimiliki oleh class Child
    - Untuk melakukan pewarisan, di class child, kita harus menggunakan kata kunci extends lalu diikuti dengan nama class parent nya.

Method Overriding
    - Method overriding adalah kemampuan mendeklarasikan ulang method di child class, yang sudah ada di parent class
    - Saat kita melakukan proses overriding tersebut, secara otomatis ketika kita membuat object dari class child, method yang di class parent tidak bisa diakses lagi
     Note:
       - Method Overriding != Mehtod Overloading
       - Method Overiding semunya harus sama, dari return sesuatu, nama method dan parameter
       - yang membedakan body dari si methodnya

Super Keyword
    - Kadang kita ingin mengakses method yang terdapat di class parent yang sudah terlanjur kita override di class child
    - Untuk mengakses method milik class parent, kita bisa menggunakan kata kunci super
    - Sederhananya, super digunakan untuk mengakses class parent
    - Tidak hanya method, field milik parent class pun bisa kita akses menggunakan kata kunci super

Super Constructor
    -Tidak hanya untuk mengakses method atau field yang ada di parent class, kata kunci super juga bisa digunakan untuk mengakses constructor
    -Namun syaratnya untuk mengakses parent class constructor, kita harus mengaksesnya di dalam class child constructor
    -Jika sebuah class parent tidak memiliki constructor yang tidak ada parameter-nya (tidak memiliki default constructor), maka class child wajib mengakses constructor class parent tersebut.


Object Class
    - Di Java, setiap class yang kita buat secara otomatis adalah turunan dari class Object
    - Walaupun tidak secara langsung kita eksplisit menyebutkan extends Object, tapi secara otomatis Java akan membuat class kita extends Object
    - Bisa dikatakan class Object adalah superclass untuk semua class yang ada di Java
    Note :
        - Saat kita bikin kelas apapun dia selalu extends object.
        - class Object adalah super Class dari java.





